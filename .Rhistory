knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
getwd()
WA<- readr::read_csv("AbaloneProject/AbaloneData.csv")
WA<- readr::read_csv("AbaloneData.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
getwd()
WA<- readr::read_csv("AbaloneData.csv")
colnames(WA
)
WA
library("tidyverse")
library("naniar")
###finding mean mass for all troughs
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "1")
mean(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "2")
mean(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "3")
mean(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "4")
mean(WAcat1$`Mass_(g)`, na.rm = TRUE)
##finding variance of mass for all troughs
WAcat1
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "1")
var(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "2")
var(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "3")
var(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "4")
var(WAcat1$`Mass_(g)`, na.rm = TRUE)
str(WA)
naniar::miss_var_summary(WA)
WA
WA2<-
WA %>%
filter(Growout_Column == "A") %>%
select(Growout_Trough, `Mass_(g)`, Gonad_Score)
WA2 %>%
group_by(Growout_Trough) %>%
summarize(reproductive_individuals= sum(Gonad_Score > 0)) %>%
ggplot(aes(x= Growout_Trough, y= reproductive_individuals, fill= Growout_Trough))+
geom_col()
WA2 %>%
group_by(Growout_Trough) %>%
summarize(reproductive_individuals= sum(Gonad_Score > 0 ))
WA %>%
filter(Growout_Column == "A") %>%
select(Growout_Trough, `Length_(mm)`, `Mass_(g)`, Gonad_Score) %>%
group_by(Growout_Trough) %>%
summarise(GS_score= sum(Gonad_Score > 0 ))
WA %>%
filter(Growout_Column == "A") %>%
select(Growout_Trough, `Length_(mm)`, `Mass_(g)`, Gonad_Score) %>%
group_by(Growout_Trough) %>%
summarise(mean_mass= mean(`Mass_(g)`))
WA %>%
filter(Growout_Column == "A") %>%
select(Growout_Trough, `Length_(mm)`, `Mass_(g)`, Gonad_Score) %>%
group_by(Growout_Trough) %>%
summarise(mean_lenght= mean(`Length_(mm)`))
WA2$Gonad_Score
sum(WA2$Gonad_Score > 0 )
library("tidyverse")
library("naniar")
###finding mean mass for all troughs
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "1")
mean(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "2")
mean(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "3")
mean(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "4")
mean(WAcat1$`Mass_(g)`, na.rm = TRUE)
##finding variance of mass for all troughs
WAcat1
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "1")
var(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "2")
var(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "3")
var(WAcat1$`Mass_(g)`, na.rm = TRUE)
WAcat1<-
WA %>%
filter(Growout_Column == "A" & Growout_Trough == "4")
var(WAcat1$`Mass_(g)`, na.rm = TRUE)
str(WA)
naniar::miss_var_summary(WA)
WA
Trough<- c(1,2,3,4)
GCS<- c(5,9,7,14)
MM<- c(5.9272, 4.2424, 3.4080, 4.4500)
ML<- c(27.072, 26.524, 22.846, 27.868)
APP<- data_frame(Trough, GCS, MM, ML)
APP
ui <- dashboardPage(
dashboardHeader(title = "How water quality affects WA"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Y Variable", choices = c("GCS", "MM", "ML"))
), # close the first box
box(title = "Plot of Water quality vs sucess", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(APP, aes_string(x = "Trough", y =  input$y)) + geom_col() + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
